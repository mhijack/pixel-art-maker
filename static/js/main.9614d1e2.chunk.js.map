{"version":3,"sources":["util/index.js","components/ControlPanel/ControlPanel.js","containers/App.js","serviceWorker.js","index.js"],"names":["util","generatePixel","id","drawnColor","arguments","length","undefined","generatePixelConfigs","height","width","configs","col","line","row","push","Object","objectSpread","ControlPanel","_ref","primaryColor","handlePickColor","react_default","a","createElement","className","lib","color","onChangeComplete","Canvas","lazy","__webpack_require__","e","then","bind","App","state","pixels","secondaryColor","event","_color$rgb","rgb","r","g","b","rgba","concat","_this","setState","componentDidMount","components_ControlPanel_ControlPanel","this","react","fallback","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8LAAeA,EAAA,WA6BX,SAASC,EAAcC,GACnB,MAAO,CACHA,KACAC,WAHsCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,MAOxC,MAAO,CACHG,qBA/BJ,WAOI,IAHF,IAHEC,EAGFJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHW,GACTK,EAEFL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFU,GACRD,EACFC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QADeE,EAEPI,EAAU,GAEPC,EAAM,EAAGA,EAAMH,EAAQG,IAAO,CAGnC,IAFA,IAAMC,EAAO,GAEJC,EAAM,EAAGA,EAAMJ,EAAOI,IAC3BD,EAAKE,KAALC,OAAAC,EAAA,EAAAD,CAAA,GACOd,EAAcU,EAAME,EAAKV,GADhC,CAEIQ,MACAE,SAGRH,EAAQI,KAAKF,GAGjB,OAAOF,IA1BA,mBCkBAO,EAfM,SAAAC,GAAuC,IAApCC,EAAoCD,EAApCC,aAAcC,EAAsBF,EAAtBE,gBAClC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,4BAEAF,EAAAC,EAAAC,cAACE,EAAA,aAAD,CACIC,MAAOP,EACPQ,iBAAkBP,MCN5BQ,EAASC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aA2CXC,6MAxCXC,MAAQ,CACJC,OAAQ,GACRjB,aAAc,OACdkB,eAAgB,UAGpBjB,gBAAkB,SAACM,EAAOY,GAAU,IAAAC,EACTb,EAAMc,IAArBC,EADwBF,EACxBE,EAAGC,EADqBH,EACrBG,EAAGC,EADkBJ,EAClBI,EAAGrB,EADeiB,EACfjB,EACXsB,EAAI,QAAAC,OAAWJ,EAAX,MAAAI,OAAiBH,EAAjB,MAAAG,OAAuBF,EAAvB,MAAAE,OAA6BvB,EAA7B,KACVwB,EAAKC,SAAS,CAAE5B,aAAcyB,OASlCI,kBAAoB,WAChBF,EAAKC,SAAS,CAAEX,OAAQpC,EAAKO,kGAI7B,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAC0B,EAAD,CACI9B,aAAc+B,KAAKf,MAAMhB,aACzBC,gBAAiB8B,KAAK9B,kBAG1BC,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,CAAUC,SAAU/B,EAAAC,EAAAC,cAAA,uBAChBF,EAAAC,EAAAC,cAACK,EAAWsB,KAAKf,gBAlCnBkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.9614d1e2.chunk.js","sourcesContent":["export default (function() {\n    /*\n        Generate a list of objects containing pixel config.\n        @param {Number?, NUmber?, String?} height & width > 50\n        @returns {Object[][]} A matrix of pixel config objects.\n    */\n    function generatePixelConfigs(\n        height = 50,\n        width = 50,\n        drawnColor = undefined\n    ) {\n        const configs = [];\n\n        for (let col = 0; col < height; col++) {\n            const line = [];\n\n            for (let row = 0; row < width; row++) {\n                line.push({\n                    ...generatePixel(col + row, drawnColor),\n                    col,\n                    row\n                });\n            }\n            configs.push(line);\n        }\n\n        return configs;\n    }\n\n    function generatePixel(id, drawnColor = null) {\n        return {\n            id,\n            drawnColor\n        };\n    }\n\n    return {\n        generatePixelConfigs\n    };\n})();\n","import React from \"react\";\nimport { SketchPicker } from \"react-color\";\n\nconst ControlPanel = ({ primaryColor, handlePickColor }) => {\n    return (\n        <div className=\"control\">\n            <div>Change Row</div>\n\n            <div>Change Column</div>\n\n            <SketchPicker\n                color={primaryColor}\n                onChangeComplete={handlePickColor}\n            />\n        </div>\n    );\n};\n\nexport default ControlPanel;\n","import React, { Component, Suspense, lazy } from \"react\";\nimport util from \"../util/index\";\n\nimport \"./App.css\";\n\nimport ControlPanel from \"../components/ControlPanel/ControlPanel\";\nconst Canvas = lazy(() => import(\"../components/Canvas/Canvas\"));\n\nclass App extends Component {\n    state = {\n        pixels: [],\n        primaryColor: \"#000\",\n        secondaryColor: \"#fff\"\n    };\n\n    handlePickColor = (color, event) => {\n        const { r, g, b, a } = color.rgb;\n        const rgba = `rgba(${r}, ${g}, ${b}, ${a})`;\n        this.setState({ primaryColor: rgba });\n    };\n\n    /*\n        Generate a list containing pixel .\n        @param {void}\n        @\n        Each pixel in the format: \n    */\n    componentDidMount = () => {\n        this.setState({ pixels: util.generatePixelConfigs() });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Pixel Art Maker</h1>\n\n                <ControlPanel\n                    primaryColor={this.state.primaryColor}\n                    handlePickColor={this.handlePickColor}\n                />\n\n                <Suspense fallback={<div>Loading</div>}>\n                    <Canvas {...this.state} />\n                </Suspense>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}